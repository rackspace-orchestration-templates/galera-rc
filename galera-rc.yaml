heat_template_version: 2015-10-15

description: |
  #### Production

  This stack is running the latest version of Galera 10.1.

  This template will only function with RackConnect v3.

parameter_groups:
- label: Galera Settings
  parameters:
  - galera_user
  - galera_database
- label: RackConnect Settings
  parameters:
  - rc_network_name
- label: rax-dev-params
  parameters:
  - secondary_template
  - ansible_source

parameters:
  #Galera Customization
  galera_user:
    type: string
    default: galera_user
    label: Galera User
    description: User to create within Galera
  galera_database:
    type: string
    default: galera_db
    label: Galera Database
    description: Database to create within Galera.  User defined in "Galera User" will have full access to this database
  rc_network_name:
    type: string
    label: RackConnect Network
    description: Name or UUID of RackConnected network to attach this server to
    constraints:
    - custom_constraint: rackconnect.network
  #Advanced Options
  server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to be used for all servers in this stack
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  server_count:
    type: number
    default: 2
    label: Number of Secondary Servers
    description: Number of secondary web nodes
    constraints:
      - range: { min: 0, max: 10 }
  server_image:
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
    label: Server Image
    description: Image to be used for all servers in this stack
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
      - CentOS 7 (PVHVM) (Orchestration)
    immutable: true
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/galera/galera-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true

resources:
  root_pass:
    type: OS::Heat::RandomString
  mysql_pass:
    type: OS::Heat::RandomString
  debian_maint_pass:
    type: OS::Heat::RandomString

  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  galera_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: galera_nodes
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure Galera
          hosts: localhost
          connection: local
          roles:
          - common
          - galera
          - firewall
  firewall_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure Firewall
          hosts: localhost
          connection: local
          roles:
          - firewall

  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: galera_server
  deploy_galera_initial:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        galera_root_password: { get_attr: [ root_pass, value ] }
        galera_debian_maint_pass: { get_attr: [ debian_maint_pass, value ] }
        galera_default_user: { get_param: galera_user }
        galera_default_user_password: { get_attr: [ mysql_pass, value ] }
        galera_default_database: { get_param: galera_database }
        galera_master_ip: { get_attr: [ galera_server, networks, { get_param: rc_network_name }, 0 ] }
        #galera_master_ip: ""
        galera_role: "master"
        galera_nodes: []
        firewall_global_rules: ["0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: { get_attr: [ galera_secondary, private_ip ] }
        firewall_node_rules: ["32,3306,tcp", "32,4567,tcp"]
      config:
        get_resource: galera_config
      server:
        get_resource: galera_server
  deploy_galera_second:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - deploy_roles
      - deploy_secondary
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        galera_root_password: { get_attr: [ root_pass, value ] }
        galera_debian_maint_pass: { get_attr: [ debian_maint_pass, value ] }
        galera_default_user: { get_param: galera_user }
        galera_default_user_password: { get_attr: [ mysql_pass, value ] }
        galera_default_database: { get_param: galera_database }
        galera_master_ip: { get_attr: [ galera_server, networks, { get_param: rc_network_name }, 0 ] }
        #galera_master_ip: ""
        galera_role: "master"
        galera_nodes: { get_attr: [ galera_secondary, rackconnect_ip ] }
        firewall_global_rules: ["0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: { get_attr: [ galera_secondary, rackconnect_ip ] }
        firewall_node_rules: ["32,3306,tcp", "32,4567,tcp"]
      config:
        get_resource: galera_config
      server:
        get_resource: galera_server
  deploy_secondary_fw_master:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: deploy_galera_initial
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        firewall_global_rules: ["0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: [ { get_attr: [ galera_server, networks, { get_param: rc_network_name }, 0 ] } ]
        firewall_node_rules: ["32,3306,tcp", "32,4567,tcp"]
      config:
        get_resource: firewall_config
      servers: { get_attr: [ galera_secondary, attributes, server ] }
  deploy_secondary_fw_secondary:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: deploy_galera_initial
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        firewall_global_rules: ["0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: { get_attr: [ galera_secondary, rackconnect_ip ] }
        firewall_node_rules: ["32,3306,tcp", "32,4567,tcp"]
      config:
        get_resource: firewall_config
      servers: { get_attr: [ galera_secondary, attributes, server ] }
  deploy_secondary:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on:
      - deploy_galera_initial
      - deploy_secondary_fw_master
      - deploy_secondary_fw_secondary
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        galera_root_password: { get_attr: [ root_pass, value ] }
        galera_debian_maint_pass: { get_attr: [ debian_maint_pass, value ] }
        galera_default_user_password: { get_attr: [ mysql_pass, value ] }
        galera_master_ip: { get_attr: [ galera_server, networks, { get_param: rc_network_name }, 0 ] }
        galera_nodes: { get_attr: [ galera_secondary, rackconnect_ip ] }
        galera_role: "secondary"
        firewall_global_rules: ["0.0.0.0,0,22,tcp", "0.0.0.0,0,3306,tcp"]
        firewall_nodes: { get_attr: [ galera_secondary, rackconnect_ip ] }
        firewall_node_rules: ["32,3306,tcp", "32,4567,tcp"]
      config:
        get_resource: galera_config
      servers: { get_attr: [ galera_secondary, attributes, server ] }

  galera_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      networks:
      - network: { get_param: rc_network_name }
      - network: 11111111-1111-1111-1111-111111111111
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  galera_server_public_ip:
    type: Rackspace::RackConnect::PublicIP
    depends_on:
    - galera_server
    properties:
      server_id: { get_resource: galera_server }

  galera_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
        type: { get_param: secondary_template }
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
          server_image: { get_param: server_image }
          server_flavor: { get_param: server_flavor }
          ansible_source: { get_param: ansible_source }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          rc_network_name: { get_param: rc_network_name }

outputs:
  galera_public_ip:
    description: Master IP
    value:
      get_attr: [galera_server, accessIPv4]
  galera_password:
    description: Galera Root Password
    value:
      get_attr: [root_pass, value]
  galera_user_password:
    description: Galera Password
    value:
      get_attr: [mysql_pass, value]
  galera_user:
    description: Galera User
    value:
      get_param: galera_user
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr: [galera_secondary, public_ip]
